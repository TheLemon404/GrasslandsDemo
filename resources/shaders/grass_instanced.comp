#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 2, std430) buffer transformsSSBO {
    mat4 transformMatrices[];
};

uniform vec3 cameraPosition;

uniform ivec2 terrainDimensions;
uniform ivec2 numInstancesPerAxis;

#include <shader_utils.glsl>
#include <matrix_math.glsl>

void main() {
    uint x = gl_WorkGroupID.x;
    uint z = gl_WorkGroupID.y;

    vec3 scaleVector = vec3(1);
    float rotate = random(vec2(x, z));

    float xp = float(x) / float(numInstancesPerAxis.x);
    float zp = float(z) / float(numInstancesPerAxis.y);

    vec3 position = vec3(
            xp * terrainDimensions.x,
            0,
            zp * terrainDimensions.y
        );
    position -= vec3(terrainDimensions.x / float(2.0), 0, terrainDimensions.y / float(2.0));

    mat4 transform = translate(position) * rotateY(rotate) * scale(scaleVector);

    transformMatrices[(x * numInstancesPerAxis.y) + z] = transform;
}
