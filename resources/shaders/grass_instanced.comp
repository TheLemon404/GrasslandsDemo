#version 430 core

layout(local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

layout(binding = 0, std430) buffer lod0SSBO {
    mat4 lod0TransformMatrices[];
};

uniform sampler2D heightMap;
uniform float heightMapStrength;
uniform vec2 terrainSpaceUVBounds;

uniform vec3 cameraPosition;
uniform mat4 cameraProjection;
uniform mat4 cameraView;
uniform float clipDistance;
uniform float frustrumClip;

uniform ivec2 terrainDimensions;
uniform ivec2 foliageChunkDimensions;
uniform ivec2 numInstancesPerAxis;

#include <shader_utils.glsl>
#include <matrix_math.glsl>

void main() {
    uint x = gl_GlobalInvocationID.x;
    uint z = gl_GlobalInvocationID.y;

    vec3 scaleVector = vec3(1);

    float xp = float(x) / float(numInstancesPerAxis.x);
    float zp = float(z) / float(numInstancesPerAxis.y);

    //create initial grass blade position
    vec3 position = vec3(cameraPosition.x, 0, cameraPosition.z) + vec3(
                xp * foliageChunkDimensions.x,
                0,
                zp * foliageChunkDimensions.y
            );
    position -= vec3(foliageChunkDimensions.x / float(2.0), 0, foliageChunkDimensions.y / float(2.0));

    //snap to grid and then add pseudo-random offset
    position -= mod(position, vec3(0.5f));
    float rand = random(position.xz);
    position += vec3(rand, 0, rand);

    //cull if extending beyond terrain
    if (
        position.x < -terrainDimensions.x / 2.0 || position.x > terrainDimensions.x / 2.0 ||
            position.z < -terrainDimensions.y / 2.0 || position.z > terrainDimensions.y / 2.0
    ) return;

    //displace with heightmap
    vec2 terrainSpaceUV = ((vec2(position.x, position.z) + terrainSpaceUVBounds) / (terrainSpaceUVBounds * 2.0));
    position += vec3(0.0f, pow(texture(heightMap, terrainSpaceUV).r, 4) * heightMapStrength, 0.0f);

    //perform frustrum culling
    vec4 clipPos = cameraProjection * cameraView * vec4(position, 1.0);
    vec3 ndc = clipPos.xyz / clipPos.w;
    if (
        ndc.x < -frustrumClip || ndc.x > frustrumClip ||
            ndc.y < -frustrumClip || ndc.y > frustrumClip ||
            ndc.z < -frustrumClip || ndc.z > frustrumClip
    ) return;

    if (distance(position, cameraPosition) > clipDistance) return;

    mat4 transform = translate(position) * scale(scaleVector);

    lod0TransformMatrices[(x * numInstancesPerAxis.y) + z] = transform;
}
